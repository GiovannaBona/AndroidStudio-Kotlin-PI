==================
PASSO A PASSO:
==================

Passo 1: Adicionar as dependências no Gradle
Adicione as dependências necessárias no arquivo build.gradle do seu módulo de aplicativo:

dependencies {
    // Retrofit para requisições HTTP e Gson para parse de JSON
    implementation 'com.squareup.retrofit2:retrofit:2.9.0'
    implementation 'com.squareup.retrofit2:converter-gson:2.9.0'
   
    // RecyclerView
    implementation 'androidx.recyclerview:recyclerview:1.2.1'
   
    // Gson
    implementation 'com.google.code.gson:gson:2.8.6'
}

---------------------------------------------------------------

Passo 2: Criar o Modelo de Dados
Crie uma classe Kotlin para os produtos:

data class Produto(
    val id: Int,
    val nome: String,
    val descricao: String,
    val quantidade: Int,
    val valor: Double
)

---------------------------------------------------------------

Passo 3: Definir a Interface Retrofit
Defina uma interface para as chamadas HTTP com Retrofit:

interface ApiService {
    @GET("produtos")
    fun getProdutos(): Call<List<Produto>>
}

---------------------------------------------------------------

Passo 4: Configurar o Retrofit
Crie uma instância do Retrofit configurada para a URL base do seu serviço e para usar Gson como conversor:

val retrofit = Retrofit.Builder()
    .baseUrl("https://seu-servico-ficticio.com/api/")
    .addConverterFactory(GsonConverterFactory.create())
    .build()

val apiService = retrofit.create(ApiService::class.java)

---------------------------------------------------------------

Passo 5: Criar o Adapter para a RecyclerView
Crie um Adapter para vincular os produtos à RecyclerView:

class ProdutoAdapter(private val produtos: List<Produto>) : RecyclerView.Adapter<ProdutoAdapter.ProdutoViewHolder>() {

    class ProdutoViewHolder(view: View) : RecyclerView.ViewHolder(view) {
        val nome: TextView = view.findViewById(R.id.nomeProduto)
        val descricao: TextView = view.findViewById(R.id.descricaoProduto)
        val quantidade: TextView = view.findViewById(R.id.quantidadeProduto)
        val valor: TextView = view.findViewById(R.id.valorProduto)
    }

    override fun onCreateViewHolder(parent: ViewGroup, viewType: Int): ProdutoViewHolder {
        val view = LayoutInflater.from(parent.context).inflate(R.layout.produto_item, parent, false)
return ProdutoViewHolder(view)
    }

    override fun onBindViewHolder(holder: ProdutoViewHolder, position: Int) {
    val produto = produtos[position]
    holder.nome.text = produto.nome
    holder.descricao.text = produto.descricao
    holder.quantidade.text = produto.quantidade.toString()
    holder.valor.text = "R$ ${produto.valor}"
    }

    override fun getItemCount(): Int = produtos.size

}

---------------------------------------------------------------

Passo 6: Configurar a RecyclerView na MainActivity
Em sua `MainActivity`, configure a `RecyclerView` e faça uma chamada ao Retrofit para buscar os dados dos produtos:

class MainActivity : AppCompatActivity() {

    private lateinit var recyclerView: RecyclerView
    private lateinit var adapter: ProdutoAdapter

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContentView(R.layout.activity_main)

        recyclerView = findViewById(R.id.recyclerView)
        recyclerView.layoutManager = LinearLayoutManager(this)

        val apiService = retrofit.create(ApiService::class.java)
        apiService.getProdutos().enqueue(object : Callback<List<Produto>> {
            override fun onResponse(call: Call<List<Produto>>, response: Response<List<Produto>>) {
                if (response.isSuccessful) {
                    adapter = ProdutoAdapter(response.body()!!)
                    recyclerView.adapter = adapter
                }
            }

            override fun onFailure(call: Call<List<Produto>>, t: Throwable) {
                // Tratamento de falha
            }
        })
    }
}


Fim.
